{"docs":[{"id":0,"title":"Introduction","href":"/docs/","content":"Introduction\nThe best way to reuse your code.\ntitle: Introduction\ndescription: The best way to reuse your code.\nlastUpdated: 4-10-2025\n\n    import * as Accordion from '$lib/components/ui/accordion'\n\n\njsrepo is a CLI that takes inspiration from the way that $2 allows you install portable blocks of code.\n\nThe goal of jsrepo is to make this method of distributing code simpler and more maintainable.\n\nIt does this by unifying the tooling it takes to build a registry with the ability to distribute it as well as providing a rich feature set to make updating your code that much easier.\n\nFAQ\n\n\n\n\nWho owns the registry?\n\n\nYou! Or someone else you know. Anyone can create a registry to be used by everyone!\n\n\n\n\nWhy would I use this instead of the shadcn cli?\n\n\njsrepo has features like interactive updates and automated registry building that make it extremely pleasant to work with!\n\n\n\n"},{"id":1,"title":"jsrepo.json","href":"/docs/jsrepo-json","content":"jsrepo.json\nThe project config file for jsrepo.\ntitle: jsrepo.json\ndescription: The project config file for jsrepo.\nlastUpdated: 4-10-2025\nThe jsrepo.json allows you to configure how jsrepo installs blocks in your project.\n\nYou can create a jsrepo.json by running the init command with the --project flag:\n\njsrepo init --project\n\n$schema\n\n$schema is tracked with the cli so you can use a specific version using unpkg:\n\n{\n\t\"$schema\": \"https://unpkg.com/jsrepo@1.47.0/schemas/project-config.json\"\n}\n\nconfigFiles\n\nWhere to add specific config files in your project.\n\n{\n\t\"configFiles\": {\n\t\t\"app.css\": \"./src/app.css\"\n\t}\n}\n\nformatter\n\nThe formatter to use when writing files in your project.\n\n{\n\t\"formatter\": \"prettier\" / \"biome\" / undefined\n}\n\njsrepo can format your files following your local config before adding them to your repository. Currently the only supported formatters are Prettier and Biome.\n\nincludeTests\n\nWhether or not to include test files when installing blocks.\n\n{\n\t\"includeTests\": false\n}\n\npaths\n\nWhere to add specific categories in your project.\n\n{\n\t\"paths\": {\n\t\t\"*\": \"./src/blocks\",\n\t\t\"components\": \"$lib/components\",\n\t\t\"hooks\": \"$lib/hooks\"\n\t}\n}\n\nrepos\n\nrepos allows you to specify different registries to install blocks from. All of the blocks from each registry will be listed when you run add.\n\n{\n\t\"repos\": [\"gitlab/ieedan/std\", \"github/ieedan/shadcn-phone-input-svelte\"]\n}\n\nwatermark\n\nWhether or not to add a watermark to installed blocks.\n\n{\n\t\"watermark\": true\n}\n\nWhen true jsrepo adds a watermark to each block that includes the registry that it was added from from.\n\n/*\n\tInstalled from github/ieedan/std\n*/\n\nexport type Point = {\n\tx: number;\n\ty: number;\n};\n"},{"id":2,"title":"Setup","href":"/docs/setup","content":"Setup\nSetup jsrepo so you can install blocks.\ntitle: Setup\ndescription: Setup jsrepo so you can install blocks.\nlastUpdated: 4-10-2025\n\n    import { PMCommand } from \"$lib/components/ui/pm-command\"\n    import { Snippet } from \"$lib/components/ui/snippet\"\n\nInstallation\n\nTo get started with jsrepo we recommend installing it globally.\n\nInitialization\n\nFor this example we will be adding blocks from $2.\n\nNow run:\n\n\n\nThis will start the setup for github/ieedan/std.\n\n┌   jsrepo  v1.47.0\n│\n◇  Please enter a default path to install the blocks\n│  ./src/blocks\n│\n◇  Which formatter would you like to use?\n│  Prettier\n│\n●  Initializing github/ieedan/std\n│\n◇  Fetched manifest from github/ieedan/std\n│\n◇  Which category paths would you like to configure?\n│  ts\n│\n◇  Where should ts be added in your project?\n│  ./src/blocks/ts\n│\n◇  Add another repo?\n│  No\n│\n◇  Wrote config to jsrepo.json\n│\n└  All done!\n\nStep through the prompts and configure:\n\nA default path to install blocks\nA formatter to use (optional)\nWhere to install specific categories\n\nOnce complete jsrepo will generate a configured $2.\n\nNow you can easily install blocks either by selecting them from a list or adding them by name:\n\njsrepo add ts/math # add by name\n\njsrepo add # add from list\n\nMaintaining Your Blocks\n\nOnce you have added blocks to your project you can easily modify the code to your own needs. But how should we handle keeping our code up to date with the source registry once the code has been modified?\n\nLuckily for you jsrepo makes this process much less painful.\n\njsrepo provides a few different commands for managing differences between your code and the source registry:\n\nupdate - interactively update your blocks and see a file by file diff before accepting, rejecting, or allowing an LLM to make changes\ntest - test your local code against the tests in the source registry\n\nUpdate\n\nTo update blocks you can run:\n\njsrepo update # choose from list\n\njsrepo update ts/math # update a specific block\n\njsrepo update --all # update all blocks\n\nWhen a file has changed jsrepo will display a diff with the incoming change.\n\nBelow the diff you are given 3 options.\n\nAccept\nReject\n✨ Update with AI ✨\n\nHit Accept to immediately write the changes to the file, Reject to discard the changes and move on, or ✨ Update with AI ✨ to allow you to customize the way you want the file to be updated by prompting an LLM of your choice.\n\nThe jsrepo update command diff tool\n\nIf a file is unchanged it will simply be skipped.\n\nTest\n\nTo test blocks you can run:\n\njsrepo test # test all blocks\n\njsrepo test ts/math # test a specific block\n\njsrepo will then pull the tests from the source registry and run them with $2 locally. "},{"id":3,"title":"add","href":"/docs/cli/add","content":"add\nAdd blocks to your project from a registry.\ntitle: add\ndescription: Add blocks to your project from a registry.\nlastUpdated: 4-10-2025\njsrepo add\n\nUsage\n\nChoose a block to add from the registries in your jsrepo.json file:\n\njsrepo add\n\nAdd a partially qualified block using the registries in your jsrepo.json file:\n\njsrepo add utils/math\n\nAdd a fully qualified block:\n\njsrepo add github/ieedan/std/utils/math\n\nInclude another registry in the blocks list:\n\njsrepo add --repo github/ieedan/std\n\nOptions\n\n--watermark\nInclude a watermark at the top of added files. (For non-interactive zero-config adds)\n\nUsage\njsrepo add --watermark true\n\n--tests\nInclude tests along with the blocks when adding them. (For non-interactive zero-config adds)\n\nUsage\njsrepo add --tests true\n\n--formatter\nConfigure the formatter used when adding and updating blocks. (prettier, biome, none) (For non-interactive zero-config adds)\n\nUsage\njsrepo add --formatter prettier\n\n--paths\nAllows you to specify where to install categories. A mirror of the paths functionality in the jsrepo.json file. (For non-interactive zero-config adds)\n\nUsage\njsrepo add --paths utils=./src/blocks/utils,ui=./src/blocks/ui\n\n-E, --expand\nExpands the diff past the limit set by --max-unchanged so that you can see the entire file.\n\nUsage\njsrepo add --expand\n\n--max-unchanged\nSets a limit on the maximum unchanged lines to display in a diff before it is collapsed. (default: 3)\n\nUsage\njsrepo add --max-unchanged 10\n\n--repo\nThe repository to download the blocks from.\n\nUsage\njsrepo add --repo github/ieedan/std\n\n-A, --allow\nAllow jsrepo to download code from the provided repo. This skips the initial confirmation prompt when attempting to download a block from a registry not listed in the jsrepo.json file.\n\nUsage\njsrepo add github/ieedan/std/utils/math --allow\n\n-y, --yes\nSkips confirmation prompts. (Not including permissions prompts)\n\nUsage\njsrepo add --yes\n\n--no-cache\n\nPrevents caching the git provider state. Useful if the cache is incorrect due to changing the default branch for a repository or changing a tag into a head or vise versa.\n\nUsage\n\njsrepo add --no-cache\n\n--verbose\n\nMore verbose logging. (May be used to troubleshoot issues)\n\nUsage\n\njsrepo add --verbose\n\n--cwd\n\nRun the current command on the provided directory absolute or relative.\n\nUsage\n\njsrepo add --cwd ./sites/docs\n\n-h, --help\n\nHelp with the command.\n\nUsage\n\njsrepo add --help\n"},{"id":4,"title":"auth","href":"/docs/cli/auth","content":"auth\nConfigure access tokens for private registry access and update with AI.\ntitle: auth\ndescription: Configure access tokens for private registry access and update with AI.\nlastUpdated: 4-10-2025\njsrepo auth\n\nUsage\n\nChoose a service and provide a token:\n\njsrepo auth\n\nAuthenticate to a specific service:\n\njsrepo auth github\n\nChoose a service to logout from:\n\njsrepo auth --logout\n\nLogout from a specific service:\n\njsrepo auth github --logout\n\nOptions\n\n--token\n\nThe token to use for authenticating to your service.\n\nUsage\n\njsrepo auth --token xxxxxxxxxxx\n\n--logout\n\nExecutes the logout flow.\n\nUsage\n\njsrepo auth --logout\n\n--cwd\n\nRun the current command on the provided directory absolute or relative.\n\nUsage\n\njsrepo auth --cwd ./sites/docs\n\n-h, --help\n\nHelp with the command.\n\nUsage\n\njsrepo add --help\n"},{"id":5,"title":"build","href":"/docs/cli/build","content":"build\nBuild your code into a jsrepo registry.\ntitle: build\ndescription: Build your code into a jsrepo registry.\nlastUpdated: 4-10-2025\njsrepo build\n\nUsage\n\nThe build command builds the specified directories into a jsrepo-manifest.json file which jsrepo can use to locate blocks in your repository.\n\njsrepo build\n\nOptions\n\n--dirs\n\nThe directories containing the categories. Corresponding config key: dirs\n\nUsage\n\njsrepo build --dirs ./src ./blocks\n\n--output-dir\n\nDirectory to copy the jsrepo-manifest.json and all required registry files to once the build is complete. This is useful when you want to host your registry on a custom domain from a different directory from where the code actually lives. Corresponding config key: outputDir\n\nUsage\n\njsrepo build --output-dir ./static/new-york\n\n--include-blocks\n\nInclude only the blocks with these names. Corresponding config key: includeBlocks\n\nUsage\n\njsrepo build --include-blocks math logger\n\n--include-categories\n\nInclude only the categories with these names. Corresponding config key: includeCategories\n\nUsage\n\njsrepo build --include-categories utils scripts\n\n--exclude-blocks\n\nDo not include the blocks with these names. Corresponding config key: excludeBlocks\n\nUsage\n\njsrepo build --exclude-blocks math logger\n\n--exclude-categories\n\nDo not include the categories with these names. Corresponding config key: excludeCategories\n\nUsage\n\njsrepo build --exclude-categories utils scripts\n\n--list-blocks\n\nList only the blocks with these names. Corresponding config key: listBlocks\n\nUsage\n\njsrepo build --list-blocks math logger\n\n--list-categories\n\nList only the categories with these names. Corresponding config key: listCategories\n\nUsage\n\njsrepo build --list-categories utils scripts\n\n--do-not-list-blocks\n\nDo not list the blocks with these names. Corresponding config key: doNotListBlocks\n\nUsage\n\njsrepo build --do-not-list-blocks math logger\n\n--do-not-list-categories\n\nDo not list the categories with these names. Corresponding config key: doNotListCategories\n\nUsage\n\njsrepo build --do-not-list-categories utils scripts\n\n--exclude-deps\n\nPrevent these dependencies from being included in the jsrepo-manifest.json file. Corresponding config key: excludeDeps\n\nUsage\n\njsrepo build --exclude-deps svelte react\n\n--allow-subdirectories\n\nAllow subdirectories to be built. Corresponding config key: allowSubdirectories\n\nUsage\n\njsrepo build --allow-subdirectories\n\n--preview\n\nDisplay a preview of the blocks list. Corresponding config key: preview\n\nUsage\n\njsrepo build --preview\n\n--verbose\n\nMore verbose logging. (May be used to troubleshoot issues)\n\nUsage\n\njsrepo build --verbose\n\n--cwd\n\nRun the current command on the provided directory absolute or relative.\n\nUsage\n\njsrepo build --cwd ./sites/docs\n\n-h, --help\n\nHelp with the command.\n\nUsage\n\njsrepo build --help\n"},{"id":6,"title":"exec","href":"/docs/cli/exec","content":"exec\nExecute a block as a script with arguments.\ntitle: exec\ndescription: Execute a block as a script with arguments.\nlastUpdated: 4-10-2025\njsrepo exec\n\nUsage\n\nChoose a script to execute from the registries in your jsrepo.json file:\n\njsrepo exec\n\nx alias:\n\njsrepo x\n\nExecute with args:\n\njsrepo exec -- argument --yes\n\nExecute a partially qualified script using the registries in your jsrepo.json file:\n\njsrepo exec github/ieedan/scripts/general/hello\n\nInclude another registry in the scripts list:\n\njsrepo exec --repo github/ieedan/scripts\n\nOptions\n\n--\n\n-- is a special option that will cause any args after it to be passed to the script instead of jsrepo.\n\nUsage\n\njsrepo exec -- argument --yes\n\n--repo\n\nThe repository to download the scripts from.\n\nUsage\n\njsrepo exec --repo github/ieedan/scripts\n\n-A, --allow\n\nAllow jsrepo to download code from the provided repo. This skips the initial confirmation prompt when attempting to download a block from a registry not listed in the jsrepo.json file.\n\nUsage\n\njsrepo exec --repo github/ieedan/scripts --allow\n\n--no-cache\n\nPrevents caching the git provider state. Useful if the cache is incorrect due to changing the default branch for a repository or changing a tag into a head or vise versa.\n\nUsage\n\njsrepo exec --no-cache\n\n--verbose\n\nMore verbose logging. (May be used to troubleshoot issues)\n\nUsage\n\njsrepo exec --verbose\n\n--cwd\n\nRun the current command on the provided directory absolute or relative.\n\nUsage\n\njsrepo exec --cwd ./sites/docs\n\n-h, --help\n\nHelp with the command.\n\nUsage\n\njsrepo exec --help\n"},{"id":7,"title":"init","href":"/docs/cli/init","content":"init\nInitialize a registry or project with jsrepo.\ntitle: init\ndescription: Initialize a registry or project with jsrepo.\nlastUpdated: 4-10-2025\njsrepo init\n\nUsage\n\nChoose to initialize a registry or project:\n\njsrepo init\n\nInitialize a project:\n\njsrepo init --project\n\nInitialize a registry:\n\njsrepo init --registry\n\nInitialize a project with registries:\n\njsrepo init github/ieedan/std\n\nOptions\n\n--repos\n\nDeprecated\nThe repositories to install the blocks from. (For project setup)\n\nUsage\n\njsrepo init --repos github/ieedan/std github/ieedan/shadcn-svelte-extras\n\n--no-watermark\n\nSets the watermark config key to false. (For project setup)\n\nUsage\n\njsrepo init --no-watermark\n\n--tests\n\nSets the tests config key to true. (For project setup)\n\nUsage\n\njsrepo init --tests\n\n--formatter\n\nConfigure the formatter used when adding and updating blocks. (prettier, biome) (For project setup)\n\nUsage\n\njsrepo init --formatter prettier\n\n-P, --project\n\nTakes you through the steps to initialize a project.\n\nUsage\n\njsrepo init --project\n\n-R, --registry\n\nTakes you through the steps to initialize a registry.\n\nUsage\n\njsrepo init --registry\n\n--script\n\nThe name of the build script. (For registry setup)\n\nUsage\n\njsrepo init --script build:registry\n\n-y, --yes\n\nSkips confirmation prompts. (Not including permissions prompts)\n\nUsage\n\njsrepo init --yes\n\n--no-cache\n\nPrevents caching the git provider state. Useful if the cache is incorrect due to changing the default branch for a repository or changing a tag into a head or vise versa.\n\nUsage\n\njsrepo init --no-cache\n\n--cwd\n\nRun the current command on the provided directory absolute or relative.\n\nUsage\n\njsrepo init --cwd ./packages/blocks\n\n-h, --help\n\nHelp with the command.\n\nUsage\n\njsrepo init --help\n"},{"id":8,"title":"test","href":"/docs/cli/test","content":"test\nTest local blocks against their corresponding tests in their source registry.\ntitle: test\ndescription: Test local blocks against their corresponding tests in their source registry.\nlastUpdated: 4-10-2025\njsrepo test\n\nUsage\n\njsrepo test\n\nOptions\n\n--repo\nThe repository to download the blocks from.\n\nUsage\njsrepo test --repo github/ieedan/std\n\n-A, --allow\nAllow jsrepo to download code from the provided repo. This skips the initial confirmation prompt when attempting to download a block from a registry not listed in the jsrepo.json file.\n\nUsage\njsrepo test github/ieedan/std/utils/math --allow\n\n--debug\nLeaves the temp test file around for debugging upon failure.\n\nUsage\njsrepo test --debug\n\n--no-cache\nPrevents caching the git provider state. Useful if the cache is incorrect due to changing the default branch for a repository or changing a tag into a head or vise versa.\n\nUsage\njsrepo test --no-cache\n\n--verbose\nMore verbose logging. (May be used to troubleshoot issues)\n\nUsage\njsrepo test --verbose\n\n--cwd\nRun the current command on the provided directory absolute or relative.\n\nUsage\njsrepo test --cwd ./sites/docs\n\n-h, --help\nHelp with the command.\n\nUsage\njsrepo test --help\n"},{"id":9,"title":"update","href":"/docs/cli/update","content":"update\nInteractively update your blocks.\ntitle: update\ndescription: Interactively update your blocks.\nlastUpdated: 4-10-2025\njsrepo update\n\nUsage\n\nChoose which blocks to update:\n\njsrepo update\n\nUpdate a specific block:\n\njsrepo update utils/math\n\nOptions\n\n--all\n\nUpdate all installed components.\n\nUsage\n\njsrepo update --all\n\n-E, --expand\n\nExpands the diff past the limit set by --max-unchanged so that you can see the entire file.\n\nUsage\n\njsrepo update --expand\n\n--max-unchanged\n\nSets a limit on the maximum unchanged lines to display in a diff before it is collapsed. (default: 3)\n\nUsage\n\njsrepo update --max-unchanged 10\n\n-n, --no\n\nDo update any blocks.\n\nUsage\n\njsrepo update --no\n\n--repo\n\nThe repository to download the blocks from.\n\nUsage\n\njsrepo update --repo github/ieedan/std\n\n-A, --allow\n\nAllow jsrepo to download code from the provided repo. This skips the initial confirmation prompt when attempting to download a block from a registry not listed in the jsrepo.json file.\n\nUsage\n\njsrepo update github/ieedan/std/utils/math --allow\n\n-y, --yes\n\nSkips confirmation prompts. (Not including permissions prompts)\n\nUsage\n\njsrepo update --yes\n\n--no-cache\n\nPrevents caching the git provider state. Useful if the cache is incorrect due to changing the default branch for a repository or changing a tag into a head or vise versa.\n\nUsage\n\njsrepo update --no-cache\n\n--verbose\n\nMore verbose logging. (May be used to troubleshoot issues)\n\nUsage\n\njsrepo update --verbose\n\n--cwd\n\nRun the current command on the provided directory absolute or relative.\n\nUsage\n\njsrepo update --cwd ./sites/docs\n\n-h, --help\n\nHelp with the command.\n\nUsage\n\njsrepo update --help\n"},{"id":10,"title":"Badges","href":"/docs/registry/badges","content":"Badges\nBadges to add to your README.\ntitle: Badges\ndescription: Badges to add to your README.\nlastUpdated: 4-10-2025\n\n    import * as Badges from \"$lib/components/site/docs/badges\";\n\nStatic Badges\n\nDynamic Badges\n\nThese badges will update based on your registry.\n\n\n"},{"id":11,"title":"Dynamic Registries","href":"/docs/registry/dynamic","content":"Dynamic Registries\nHow to create dynamic registries in jsrepo.\ntitle: Dynamic Registries\ndescription: How to create dynamic registries in jsrepo.\nlastUpdated: 4-10-2025\nThe final frontier of reusable code.\n\nIf you have ever used $2 to install components from $2 you are familiar with dynamic registries. They allow the server to serve different files to the CLI based on the route that was requested.\n\nThis is useful if your product generates code that you want to distribute through the jsrepo CLI.\n\nTo understand how to effectively create a dynamic registry in jsrepo you need to have a deeper understanding of the way that the manifest file works.\n\nHow jsrepo locates files\n\nThe jsrepo-manifest.json includes all the blocks in your registry and their locations relative to the manifest file.\n\nThis means that you need to ensure that the files needed for your registry are served from the path that is inferred from the jsrepo-manifest.json.\n\nFor example take this manifest entry for a button component:\n\n{\n    name: 'ui',\n    blocks: [\n        {\n            name: 'button',\n            directory: 'src/ui/button',\n            category: 'ui',\n            tests: false,\n            subdirectory: true,\n            list: true,\n            files: ['button.svelte', 'index.ts'],\n            localDependencies: ['utils/utils'],\n            dependencies: [],\n            devDependencies: [\n                '@lucide/svelte@^0.475.0',\n                'bits-ui@1.3.2',\n                'tailwind-variants@^0.3.1'\n            ],\n            imports: {\n                '$lib/utils/utils.js': '{{utils/utils}}.js'\n            }\n        }\n    ]\n},\n\nThe directory that the files for button live in is src/ui/button because the directory prop is set to src/ui/button.\n\nBecause of this jsrepo expects the files button.svelte and index.ts to exist at src/ui/button/button.svelte and src/ui/button/index.ts respectively.\n\nDependencies\n\nAny remote or local dependencies that need to be resolved should also be added to each block. In the case of the button component shown above. It has 3 remote dependencies and 1 local dependency.\n\nRemote dependencies exist under dependencies or devDependencies and give the name of the package optionally followed by the version.\n\nLocal dependencies exist under localDependencies and reference other blocks in the registry and they are listed by /. In this case utils/utils is referring to the utils block in the utils category.\n\nLocal dependencies should also come with corresponding mappings in imports. The imports key maps literal import statements to a template that is replaced before adding blocks to your project. This allows users to put blocks anywhere in their project without breaking their code.\n\nIf you want dynamic blocks to depend on other blocks you will need to be able to add keys to imports to prevent breaking their code. Here is an example of how you might resolve the utils import from the button component above:\n\n// here we just replace everything except for the extension\n// so it turns into {{utils/utils}}.js\nimport { cn } from '$lib/utils/utils.js';\n// turns into {{utils/utils}}\nimport { cn } from '$lib/utils/utils';\n// turns into {{utils/utils}}\nimport { cn } from '../utils/utils';\n// if utils was a subdirectory with a file index.js\n// turns into {{utils/utils}}/index.js\nimport { cn } from '../utils/utils/index.js';\n\nEssentially the path to the local dependency is insignificant but the file or extension after it must be included.\n\nType Definitions\n\nType definitions for the manifest can be acquired via the JS API:\n\nimport type { Manifest } from 'jsrepo';\n\nConclusion\n\nWith all of this considered you can pretty easily create a dynamic jsrepo registry in a few minutes and start distributing components through the jsrepo CLI.\n\nExamples\n\n$2\n"},{"id":12,"title":"Getting Started","href":"/docs/registry","content":"Getting Started\nHow to build your own registry with jsrepo.\ntitle: Getting Started\ndescription: How to build your own registry with jsrepo.\nlastUpdated: 4-10-2025\nHere we will walk your through how to create your first registry with jsrepo.\n\nInitialize a new project\n\nLet's start by initializing our project with a package.json:\n\nnpm init\n\nCreate your first block\n\nNow let's create a directory that will be our \"category\". A category is the section before the / in a block specifier (/) this allows you to categorize your blocks.\n\nFor this example we will create a new category utils under the /src directory. Your project should now look like this:\n\nroot\n├── /src\n│   └── /utils\n└── package.json\n\nNext let's create our first block.\n\nAdd a new file called add.ts under /utils and paste the following code:\n\nexport function add(a: number, b: number) {\n\treturn a + b;\n}\n\nConfigure the build command\n\nNow that we have a block in our category let's build it into a manifest that jsrepo can understand.\n\nBefore we can do that we will need to configure the build command so that it knows where to look for our blocks.\n\nFor this let's run:\n\njsrepo init --registry\n\nNow jsrepo will ask us some questions about our project. The first of which is \"Where are your blocks located?\". Here we say /src because it is the directory containing the category we just created utils.\n\nFrom here allow jsrepo to create the jsrepo-build-config.json file and step through the rest of the prompts.\n\n┌   jsrepo  v1.0.0\n│\n◇  Where are your blocks located?\n│  ./src\n│\n◇  Add another blocks directory?\n│  No\n│\n◇  Create a jsrepo-build-config.json file?\n│  Yes\n│\n◇  Added build:registry to scripts in package.json\n│\n◇  Created jsrepo-build-config.json\n│\n├  Next Steps ────────────────────────────────────────────────┐\n│                                                             │\n│  1. Add categories to ./src.                              │\n│  2. Run npm run build:registry to build the registry.     │\n│                                                             │\n├─────────────────────────────────────────────────────────────┘\n│\n└  All done!\n\nOnce you're done you should be able to run:\n\njsrepo build\n\njsrepo will then output a jsrepo-manifest.json that looks like this:\n\n{\n\t\"categories\": [\n\t\t{\n\t\t\t\"name\": \"utils\",\n\t\t\t\"blocks\": [\n\t\t\t\t{\n\t\t\t\t\t\"name\": \"add\",\n\t\t\t\t\t\"directory\": \"src/utils\",\n\t\t\t\t\t\"category\": \"utils\",\n\t\t\t\t\t\"tests\": false,\n\t\t\t\t\t\"subdirectory\": false,\n\t\t\t\t\t\"list\": true,\n\t\t\t\t\t\"files\": [\"add.ts\"],\n\t\t\t\t\t\"localDependencies\": [],\n\t\t\t\t\t\"imports\": {},\n\t\t\t\t\t\"dependencies\": [],\n\t\t\t\t\t\"devDependencies\": []\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t]\n}\n\nCongratulations you have just built your first registry.\n\nNow you can choose any one of the $2 to host your registry and start distributing your code!\n\nResolving Dependencies\n\nWhile small projects like the one above are nice as an example they really don't show any of the true power of jsrepo.\n\nMost real projects will have different blocks that depend on each other or that depend on packages.\n\nLet's see how jsrepo handles that...\n\nCreate a new file print.ts under /utils and paste the following code:\n\nimport color from 'chalk';\nimport { add } from './add';\n\nexport function printSum(a: number, b: number) {\n\tconst answer = add(a, b);\n\n\treturn console.log(The answer is: ${color.cyan(answer.toString())});\n}\n\nNow if you build your jsrepo-manifest.json should look like this:\n\n{\n\t\"categories\": [\n\t\t{\n\t\t\t\"name\": \"utils\",\n\t\t\t\"blocks\": [\n\t\t\t\t// add ...\n\t\t\t\t{\n\t\t\t\t\t\"name\": \"print\",\n\t\t\t\t\t\"directory\": \"src/utils\",\n\t\t\t\t\t\"category\": \"utils\",\n\t\t\t\t\t\"tests\": false,\n\t\t\t\t\t\"subdirectory\": false,\n\t\t\t\t\t\"list\": true,\n\t\t\t\t\t\"files\": [\"print.ts\"],\n\t\t\t\t\t\"localDependencies\": [\"utils/add\"],\n\t\t\t\t\t\"imports\": {\n\t\t\t\t\t\t\"./add\": \"{{utils/add}}\"\n\t\t\t\t\t},\n\t\t\t\t\t\"dependencies\": [\"chalk\"],\n\t\t\t\t\t\"devDependencies\": []\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t]\n}\n\nYou should notice the print block has now been added to the blocks array for the utils category.\n\nIt should have utils/add under it's localDependencies and chalk under it's dependencies.\n\nRight now chalk doesn't have a version, but if we run npm install chalk jsrepo will use the version in your package.json\n\nExcluding Dependencies\n\nOften you may want certain dependencies to not be installed when users add your blocks.\n\nMost commonly this will be things like the framework you are using (Next, Svelte, etc.).\n\nTo prevent dependencies from being installed use the --exclude-deps flag or the corresponding excludeDeps option in your config:\n\nFlag:\n\njsrepo build --exclude-deps\n\nOption:\n\n{\n\t\"excludeDeps\": [\"react\"]\n}\n\nAutomatically Excluded Dependencies\n\nBy default in svelte and vue files importing from svelte or vue will not result in the dependencies being added.\n\nThis is because we can generally assume anyone adding either of those filetypes to their project will already have Svelte or Vue installed.\n\nPeer Dependencies\n\nPeer dependencies all you to warn your users when they are using unsupported versions of dependencies they need for your registry to function.\n\nAn example of this could be your project using TailwindCSS v3 while waiting to migrate to v4. In the meantime you can setup peer dependencies to warn users that v4 is not yet fully supported.\n\n{\n\t\"peerDependencies\": {\n\t\t\"tailwindcss\": {\n\t\t\t\"version\": \"3.x.x\",\n\t\t\t\"message\": \"Tailwind@v4 is not yet fully supported see: https://github.com/ieedan/jsrepo\"\n\t\t}\n\t}\n}\n\nConfig Files\n\nFor some registries you will need the user to have config files such as a tailwind.config.ts or global.css.\n\nYou can include these files by configuring them in the jsrepo-build-config.json:\n\n{\n\t\"configFiles\": [\n\t\t{\n\t\t\t\"name\": \"Tailwind Config\",\n\t\t\t\"path\": \"./tailwind.config.ts\",\n\t\t\t\"expectedPath\": \"./tailwind.config.ts\",\n\t\t\t\"optional\": false\n\t\t}\n\t]\n}\n\nWhen users initialize your registry they will be prompted to add or update these config files.\n\nMetadata\n\nYou can view your registry on the jsrepo site by navigating to https://jsrepo.dev/registries/ this page uses information from the manifest to display information like how many categories / blocks your registry has or it's dependencies.\n\nHowever if you configure the meta key in the jsrepo-build-config.json you can add more information like a description, a homepage, and tags. \n\nLive Examples\n\n$2\n$2\n$2\n$2\n$2\n"},{"id":13,"title":"jsrepo-build-config.json","href":"/docs/registry/jsrepo-build-config-json","content":"jsrepo-build-config.json\nThe registry config file for jsrepo.\ntitle: jsrepo-build-config.json\ndescription: The registry config file for jsrepo.\nlastUpdated: 4-10-2025\njsrepo-build-config.json holds the configuration for your registry.\n\nYou can create a jsrepo-build-config.json by running the init command with the --registry flag:\n\njsrepo init --registry\n\n$schema\n\n$schema is tracked with the cli so you can use a specific version using unpkg:\n\n{\n\t\"$schema\": \"https://unpkg.com/jsrepo@1.47.0/schemas/registry-config.json\"\n}\n\nallowSubdirectories\n\nallowSubdirectories allows subdirectories to be built.\n\n{\n\t\"allowSubdirectories\": false\n}\n\nconfigFiles\n\nconfigFiles allows you to specify files that the user may need in their project for the registry to function properly.\n\n{\n\t\"configFiles\": [\n\t\t{\n\t\t\t\"name\": \"app.css\",\n\t\t\t\"path\": \"./src/app.css\",\n\t\t\t\"expectedPath\": \"./src/app.css\",\n\t\t\t\"optional\": false\n\t\t}\n\t]\n}\n\nexpectedPath\n\nThe path where you expect users to have this file (used as a default in prompts).\n\nname\n\nThe name as it will be displayed in prompts to the user.\n\noptional\n\nWhen true users will be prompted to ask whether or not they want to add the config file.\n\npath\n\nThe path of the file in your registry.\n\ndirs\n\ndirs is a list of the directories that contain your block categories.\n\n{\n\t\"dirs\": [\"./src\", \"./blocks\"]\n}\n\ndoNotListBlocks\n\ndoNotListBlocks is a list of block names that shouldn't be listed when the user runs the add command.\n\n{\n\t\"doNotListBlocks\": [\"utils\"]\n}\n\ndoNotListCategories\n\ndoNotListCategories is a list of category names that shouldn't be listed when the user runs the add command.\n\n{\n\t\"doNotListCategories\": [\"utils\"]\n}\n\nexcludeBlocks\n\nexcludeBlocks allows you to prevent the specified blocks from being included in the manifest.\n\n{\n\t\"excludeBlocks\": [\"domain\"]\n}\n\nexcludeCategories\n\nexcludeCategories allows you to prevent the specified categories from being included in the manifest.\n\n{\n\t\"excludeCategories\": [\"INTERNAL\"]\n}\n\nexcludeDeps\n\nexcludeDeps allows you to prevent specified remote dependencies from being installed when the user adds/updates blocks. This is useful for framework specific API's like React or Svelte.\n\n{\n\t\"excludeDeps\": [\"svelte\", \"react\", \"vue\"]\n}\n\nincludeBlocks\n\nincludeBlocks allows you to only include specified blocks in the final manifest file. Keep in mind that if these blocks are referenced by other blocks that are included then your build will break.\n\n{\n\t\"includeBlocks\": [\"ui\", \"hooks\"]\n}\n\nincludeCategories\n\nincludeCategories allows you to only include specified categories in the final manifest file. Keep in mind that if these categories are referenced by other categories that are included then your build will break.\n\n{\n\t\"includeCategories\": [\"components\", \"utils\"]\n}\n\nlistBlocks\n\nlistBlocks is a list of block names that should be listed when the user runs the add command.\n\n{\n\t\"listBlocks\": [\"utils\"]\n}\n\nlistCategories\n\nlistCategories is a list of category names that should be listed when the user runs the add command.\n\n{\n\t\"listCategories\": [\"utils\"]\n}\n\nmeta\n\nmeta allows you to provide optional information about the registry that can be displayed to users for better documentation.\n\n{\n\t\"meta\": {\n\t\t\"authors\": [\"Aidan Bleser\"],\n\t\t\"bugs\": \"https://github.com/ieedan/std/issues\",\n\t\t\"description\": \"Fully tested and documented TypeScript utilities brokered by jsrepo.\",\n\t\t\"homepage\": \"https://ieedan.github.io/std/\",\n\t\t\"repository\": \"https://github.com/ieedan/std\",\n\t\t\"tags\": [\"typescript\", \"std\"]\n\t}\n}\n\noutputDir\n\noutputDir is an optional key that allows you to copy the resulting jsrepo-manifest.json and any required files to a custom directory.\n\nThis is useful if you want to host the registry in a different location from where the code actually lives. (This should NOT be used when hosting your registry from a git repository)\n\n{\n\t\"outputDir\": \"./static/new-york\"\n}\n\npeerDependencies\n\npeerDependencies allow you to warn users when they are missing dependencies that are required or are using dependency versions that are incompatible.\n\n{\n\t\"peerDependencies\": {\n\t\t\"svelte\": {\n\t\t\t\"version\": \"5.x.x\",\n\t\t\t\"message\": \"Svelte 5 is the only supported version for this registry see: https://github.com/ieedan/jsrepo\"\n\t\t},\n\t\t\"tailwindcss\": \"3.x.x\"\n\t}\n}\n\nmessage\n\nA message displayed to users when installing with an incompatible peer dependency.\n\nversion\n\nThe version or version range that is supported by your registry.\n\npreview\n\npreview displays a preview of the blocks list.\n\n{\n\t\"preview\": false\n}\n\nrules\n\nrules allows you to configure the rules when checking the manifest file after build.\n\nBelow are the default settings for each rule.\n\n{\n\t\"rules\": {\n\t\t\"no-category-index-file-dependency\": \"warn\",\n\t\t\"no-unpinned-dependency\": \"warn\",\n\t\t\"require-local-dependency-exists\": \"error\",\n\t\t\"max-local-dependencies\": [\"warn\", 10],\n\t\t\"no-cir-dependency\": \"error\",\n\t\t\"no-unused-block\": \"warn\",\n\t\t\"no-framework-dependency\": \"warn\"\n\t}\n}\n\nno-category-index-file-dependency\n\nDisallow depending on the index file of a category.\n\nno-unpinned-dependency\n\nRequire all dependencies to have a pinned version.\n\nrequire-local-dependency-exists\n\nRequire all local dependencies to exist.\n\nmax-local-dependencies\n\nEnforces a limit on the amount of local dependencies a block can have.\n\nno-circular-dependency\n\nDisallow circular dependencies.\n\nno-unused-block\n\nDisallow unused blocks. (Not listed and not a dependency of another block)\n\nno-framework-dependency\n\nDisallow frameworks (Svelte, Vue, React) as dependencies.\n"},{"id":14,"title":"Language Support","href":"/docs/registry/language-support","content":"Language Support\nThe languages that jsrepo supports in your registry.\ntitle: Language Support\ndescription: The languages that jsrepo supports in your registry.\nlastUpdated: 4-10-2025\n\n    import { LanguageSupport } from \"$lib/components/site/docs\";\n\n\njsrepo has to analyze your code to resolve any local/remote dependencies. Because of this it needs to explicitly support languages for them to be used in your registry.\n\n✅: Supported\n⌛️: In progress\n🚫: Not in progress\n⚠️: Partial support\n\n\n"},{"id":15,"title":"AzureDevops","href":"/docs/registry/providers/azure","content":"AzureDevops\nHow to use AzureDevops as your registry provider.\ntitle: AzureDevops\ndescription: How to use AzureDevops as your registry provider.\nlastUpdated: 4-10-2025\nBranches and Tags\n\nBecause the AzureDevops URL structure doesn't include enough information to fetch raw files we have to use a custom structure so copy pasting the URL from the homepage like you can for other providers won't just work.\n\nInstead you need to follow the following format:\n\nazure////(tags|heads)/\n\nazure/ieedan/std/std # default branch shorthand\nazure/ieedan/std/std/tags/v1.5.0 # tag reference\nazure/ieedan/std/std/heads/next # branch reference\n\nUsing Tags for Versioning\n\nTags can be a great solution to ensuring remote tests and blocks stay on a consistent version.\n\n{\n\t\"$schema\": \"https://unpkg.com/jsrepo@1.47.0/schemas/project-config.json\",\n\t// use a specific version tag\n\t\"repos\": [\"azure/ieedan/std/std/tags/v1.5.0\"],\n\t\"path\": \"src/blocks\",\n\t\"includeTests\": false,\n\t\"watermark\": true,\n\t\"formatter\": \"prettier\",\n\t\"paths\": {\n\t\t\"*\": \"./src/blocks\"\n\t}\n}\n\nTags do not however work like npm packages. Tags are completely mutable meaning a malicious registry could publish over a tag with different code.\n\nThis is why it's always important to make sure you trust the owner of the registry."},{"id":16,"title":"BitBucket","href":"/docs/registry/providers/bitbucket","content":"BitBucket\nHow to use BitBucket as your registry provider.\ntitle: BitBucket\ndescription: How to use BitBucket as your registry provider.\nlastUpdated: 4-10-2025\nBranches and Tags\n\njsrepo supports BitBucket so that you can just paste a link to the repo homepage and it will be handled correctly.\n\nBecause of this all of the following paths work:\n\nhttps://bitbucket.org/ieedan/std # default branch shorthand\nhttps://bitbucket.org/ieedan/std/src/v1.5.0 # tag reference\nhttps://bitbucket.org/ieedan/std/src/next # branch reference\n\nUsing Tags for Versioning\n\nTags can be a great solution to ensuring remote tests and blocks stay on a consistent version.\n\n{\n\t\"$schema\": \"https://unpkg.com/jsrepo@1.47.0/schemas/project-config.json\",\n\t// use a specific version tag\n\t\"repos\": [\"https://bitbucket.org/ieedan/std/src/v1.5.0\"],\n\t\"path\": \"src/blocks\",\n\t\"includeTests\": false,\n\t\"watermark\": true,\n\t\"formatter\": \"prettier\",\n\t\"paths\": {\n\t\t\"*\": \"./src/blocks\"\n\t}\n}\n\nTags do not however work like npm packages. Tags are completely mutable meaning a malicious registry could publish over a tag with different code.\n\nThis is why it's always important to make sure you trust the owner of the registry.\n\nbitbucket Shorthand\n\nWhen referencing bitbucket as the provider you can use the bitbucket shorthand in place of https://bitbucket.org.\n\nExample:\n\nnpx jsrepo add bitbucket/ieedan/std/src/main/utils/math\n\nIn the jsrepo.json:\n\n{\n\t\"$schema\": \"https://unpkg.com/jsrepo@1.47.0/schemas/project-config.json\",\n\t// use bitbucket instead of https://bitbucket.org\n\t\"repos\": [\"bitbucket/ieedan/std/src/main\"],\n\t\"path\": \"src/blocks\",\n\t\"includeTests\": false,\n\t\"watermark\": true,\n\t\"formatter\": \"prettier\",\n\t\"paths\": {\n\t\t\"*\": \"./src/blocks\"\n\t}\n}\n"},{"id":17,"title":"GitHub","href":"/docs/registry/providers/github","content":"GitHub\nHow to use GitHub as your registry provider.\ntitle: GitHub\ndescription: How to use GitHub as your registry provider.\nlastUpdated: 4-10-2025\nBranches and Tags\n\njsrepo supports GitHub so that you can just paste a link to the repo homepage and it will be handled correctly.\n\nBecause of this all of the following paths work:\n\nhttps://github.com/ieedan/std # default branch shorthand\nhttps://github.com/ieedan/std/tree/v1.5.0 # tag reference\nhttps://github.com/ieedan/std/tree/next # branch reference\n\nUsing Tags for Versioning\n\nTags can be a great solution to ensuring remote tests and blocks stay on a consistent version.\n\n{\n\t\"$schema\": \"https://unpkg.com/jsrepo@1.47.0/schemas/project-config.json\",\n\t// use a specific version tag\n\t\"repos\": [\"https://github.com/ieedan/std/tree/v1.5.0\"],\n\t\"path\": \"src/blocks\",\n\t\"includeTests\": false,\n\t\"watermark\": true,\n\t\"formatter\": \"prettier\",\n\t\"paths\": {\n\t\t\"*\": \"./src/blocks\"\n\t}\n}\n\nTags do not however work like npm packages. Tags are completely mutable meaning a malicious registry could publish over a tag with different code.\n\nThis is why it's always important to make sure you trust the owner of the registry.\n\ngithub Shorthand\n\nWhen referencing GitHub as the provider you can use the github shorthand in place of https://github.com.\n\nExample:\n\nnpx jsrepo add github/ieedan/std/utils/math\n\nIn the jsrepo.json:\n\n{\n\t\"$schema\": \"https://unpkg.com/jsrepo@1.47.0/schemas/project-config.json\",\n\t// use github instead of https://github.com\n\t\"repos\": [\"github/ieedan/std\"],\n\t\"path\": \"src/blocks\",\n\t\"includeTests\": false,\n\t\"watermark\": true,\n\t\"formatter\": \"prettier\",\n\t\"paths\": {\n\t\t\"*\": \"./src/blocks\"\n\t}\n}\n\nRate Limiting\n\nIf you are doing a lot of testing with jsrepo you may eventually get to a point where GitHub \"cuts you off\". At this point GitHub will start to return cached responses when trying to add, update, or test blocks.\n\nYou can get around this by supplying a PAT with the auth command.\n\nCI / CD\n\nIf you are creating your own registry you may want to build the registry on a push to the main branch to make sure that the jsrepo-manifest.json is always up to date with the latest changes.\n\nWorkflow to build the manifest and create a pull request:\n\nname: build-registry\non:\n  push:\n    branches:\n      main\npermissions:\n  contents: write\n  pull-requests: write\n  id-token: write\njobs:\n  build:\n    runs-on: ubuntu-latest\n    permissions:\n      contents: write\n      pull-requests: write\n    steps:\n      uses: actions/checkout@v4\n        with:\n          fetch-depth: 0\n      uses: actions/setup-node@v4\n        with:\n          node-version: '20'\njsrepo doesn't need any of your\ndependencies to be installed to work\n      name: Build jsrepo-manifest.json\n        run: npx jsrepo build\n      name: Create pull request with changes\n        uses: peter-evans/create-pull-request@v7\n        with:\n          title: 'chore: update jsrepo-manifest.json'\n          body: |\n            Update jsrepo-manifest.json\n            ---\n            This PR was auto generated\n          branch: build-manifest\n          commit-message: build jsrepo-manifest.json\n"},{"id":18,"title":"GitLab","href":"/docs/registry/providers/gitlab","content":"GitLab\nHow to use GitLab as your registry provider.\ntitle: GitLab\ndescription: How to use GitLab as your registry provider.\nlastUpdated: 4-10-2025\nBranches and Tags\n\njsrepo supports GitLab so that you can just paste a link to the repo homepage and it will be handled correctly.\n\nBecause of this all of the following paths work:\n\nhttps://gitlab.com/ieedan/std # default branch shorthand\nhttps://gitlab.com/ieedan/std/-/tree/v1.5.0 # tag reference\nhttps://gitlab.com/ieedan/std/-/tree/next # branch reference\n\nUsing Tags for Versioning\n\nTags can be a great solution to ensuring remote tests and blocks stay on a consistent version.\n\n{\n\t\"$schema\": \"https://unpkg.com/jsrepo@1.47.0/schemas/project-config.json\",\n\t// use a specific version tag\n\t\"repos\": [\"https://gitlab.com/ieedan/std/-/tree/v1.5.0\"],\n\t\"path\": \"src/blocks\",\n\t\"includeTests\": false,\n\t\"watermark\": true,\n\t\"formatter\": \"prettier\",\n\t\"paths\": {\n\t\t\"*\": \"./src/blocks\"\n\t}\n}\n\nTags do not however work like npm packages. Tags are completely mutable meaning a malicious registry could publish over a tag with different code.\n\nThis is why it's always important to make sure you trust the owner of the registry.\n\ngitlab Shorthand\n\nWhen referencing GitLab as the provider you can use the gitlab shorthand in place of https://gitlab.com.\n\nExample:\n\nnpx jsrepo add gitlab/ieedan/std/utils/math\n\nIn the jsrepo.json:\n\n{\n\t\"$schema\": \"https://unpkg.com/jsrepo@1.47.0/schemas/project-config.json\",\n\t// use gitlab instead of https://gitlab.com\n\t\"repos\": [\"gitlab/ieedan/std\"],\n\t\"path\": \"src/blocks\",\n\t\"includeTests\": false,\n\t\"watermark\": true,\n\t\"formatter\": \"prettier\",\n\t\"paths\": {\n\t\t\"*\": \"./src/blocks\"\n\t}\n}\n\nSelf hosted GitLab\n\nSome companies prefer to host their own GitLab instance so we allow that too!\n\nYou can use the gitlab: prefix followed by your custom domain to point to your self hosted instance:\n\ngitlab:https://example.com/ieedan/std\n\nNow requests will be made to https://example.com with the owner ieedan and the repository name std.\n"},{"id":19,"title":"Providers","href":"/docs/registry/providers","content":"Providers\nThe registry providers jsrepo supports.\ntitle: Providers\ndescription: The registry providers jsrepo supports.\nlastUpdated: 4-10-2025\n\n    import { ProviderCards } from \"$lib/components/site/docs\";\n\n\njsrepo supports multiple providers so everyone can take advantage of it.\n\n"},{"id":20,"title":"Self Hosted","href":"/docs/registry/providers/self-hosted","content":"Self Hosted\nHow to self host your registry.\ntitle: Self Hosted\ndescription: How to self host your registry.\nlastUpdated: 4-10-2025\nYou can host your registry on your own domain by serving it's assets statically.\n\nThis also allows you to customize where and how things are served in ways that aren't possible when serving from a git provider. Here's a few situations that self hosting makes sense:\n\nServing multiple registries / registry variants\nBranding for your registry \nURL shortening\n\nSetup\n\nTo get started you need a way to serve your registry. This can be done with most web application frameworks by just serving the registry out of the corresponding static folder. \n\nSvelteKit - /static\nNext.js - /public\nNuxt - /public\nNitro - /public\n\nOnce you know where your static folder is you can use the --output-dir flag or the corresponding outputDir option in your jsrepo-build-config.json to build the registry and output it so it can be served from your static folder.\n\nFor this example let's host our registry on our site example.com at /r.\n\nBuild with flag:\n\njsrepo build --output-dir ./public/r\n\nor with config option:\n\n{\n    // ...\n    \"outputDir\": \"./public/r\"\n}\n\nOnce you have built your registry the manifest file and any assets that it needs should be copied into /public/r.\n\nNow if you serve your site your registry should be accessible at https://example.com/r.\n\nUsers can now add blocks like so:\n\njsrepo add --repo https://example.com/r\n\nMultiple Registries\n\nSince self hosting allows you to serve your registry from any path you can also serve multiple registries from the same domain.\n\nFor example say you had a JavaScript and TypeScript variant of your registry. You may want to serve them from example.com/r/ts and example.com/r/js respectively.\n\nTo do this you can adjust your build config to build each registry individually and pass a different path to the --output-dir flag for each registry.\n\njsrepo build --output-dir ./public/r/ts # ts\n\njsrepo build --output-dir ./public/r/js # js\n\nNow users could access each registry like so:\n\njsrepo add --repo https://example.com/r/ts # ts\n\njsrepo add --repo https://example.com/r/js # js\n\nPrivate Registries\n\nYou can keep your self-hosted registries private only allowing authenticated users to access blocks.\n\nUsers can provide a token to the auth method or during initialization so that they can access the registry. This token will be passed using the Authorization header with the Bearer scheme."}]}